


app {

  http {
    interface = "0.0.0.0"
    port = 30367
  }

  client {
    appIds = ["drogon"]
    secureKeys = ["dsacsodaux84fsdcs4wc32xm"]
  }

  weixin {
    mchId = "1372509302"
//    appId = "wxe41308423bc2e12c" //水木plus
    appId = "wx593f40b83151b280" //小程序
    key = "lu1701z0t51jdiMKad2sLfaKLerdflo0"
    notifyUrl = "http://flowdev.neoap.com/timeline/weixinuser/notifyurl"
    ip = "114.255.41.252"
    subject = "默契猜-用户充值"
    desc = "默契猜-现金到账"
    withdrawLimit = 10 //提现次数限制
  }

  //0-等待支付，1-支付完成  2-已退款  -2-超时关闭  -1-取消支付
  orderStatePaying = 0
  orderStateFinish = 1
  orderStateRefund = 2
  orderStateClosed = -2
  orderStateCancelled = -1

  //红包金额下限为1分，红包金额上限为5000元
  feeMin=1
  feeMax=500000
}

dependence{
  mchOrderCheckInterval =  600000 //milliseconds
  userOrderRetryInterval = 60000
  mchOrderRetryInterval = 600000 //milliseconds
  userRechargeInterval = 86400000 //milliseconds
  rechargeFeeMin = 1
  rechargeFeeMax = 500000
//  isTest = true //是否压测
  isTest = false //是否压测
  authCheck = true //是否鉴权
//  authCheck = false
}



slick.db {
  url = "jdbc:postgresql://10.1.29.247:5432/timeline"
//  url = "jdbc:postgresql://192.168.0.247:5432/timeline"
//  url = "jdbc:postgresql://10.1.29.250:5432/timeline"
//  url = "jdbc:postgresql://localhost:5432/timeline"
  user = "timeline"
  password = "20Cre18Dit"
  maximumPoolSize = 10
  connectTimeout = 30000
  idleTimeout = 300000
  maxLifetime = 900000
}




session {

  cookie {
    name = "timeline_Session"
    domain = none
    path = "/"
    secure = false
    httpOnly = true
    maxAge = 1 days
  }
  encryptData = false
  serverSecret = "r^20M0;[d4sK3y2*mdg-aj53Ke2lmOd4do3Dymc3g8n23;rl4;zt3;0gfdyrewr3lrt+LGfhf9"

}


akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  actor {


    my-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"

      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # value, if it is defined. Then the other pool-size properties will not
        # be used.
        #
        # Valid values are: `off` or a positive integer.
        fixed-pool-size = off

        # Min number of threads to cap factor-based corePoolSize number to
        core-pool-size-min = 16

        # The core-pool-size-factor is used to determine corePoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 100.0

        # Max number of threads to cap factor-based corePoolSize number to
        core-pool-size-max = 256

        # Minimum number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-min = 16

        # The max-pool-size-factor is used to determine maximumPoolSize of the
        # ThreadPoolExecutor using the following formula:
        # ceil(available processors * factor)
        # The maximumPoolSize will not be less than corePoolSize.
        # It is only used if using a bounded task queue.
        max-pool-size-factor = 100.0

        # Max number of threads to cap factor-based maximumPoolSize number to
        max-pool-size-max = 256

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      throughput = 100
    }

  }

  http{
    parsing{
      max-content-length = 40m
    }
  }



}


